# import MongoDB modules
from pymongo import MongoClient

# import the Requests HTTP library
import requests

# import the Beautiful Soup module
from bs4 import BeautifulSoup

# import the time module for the sleep functionality
# in order to be polite when scraping
import time

# randomize a bit for the scraping
import random


def scrape_user_to_db():
    path = 'http://api.steampowered.com/ISteamUser/GetPlayerSummaries/v0002/?key=5DA6749271B3262B589F2980379B9AE2&steamids='

    user_id =   "76561197900000000"
    user_id = "765611979"
    # user_id = "76561197960435530" # valid
    # user_id = "765611979468871517" # invalid

    # API profile: this represents an empty response, if we get this then it's not a good profile, try again
    none_soup = BeautifulSoup('<html><body><p>{\n\t"response": {\n\t\t"players": [\n\n\t\t]\n\t\t\n\t}\n}</p></body></html>', "lxml")

    # User web profile, intentionally generate an error/empty profile so we can skip storing that
    error_path = "https://steamcommunity.com/id/{}/games/?tab=all".format("stas350")
    bad_req = requests.get(error_path)

    # this is what we will check against to make sure that the response isn't an error
    profile_error = BeautifulSoup(bad_req.content, "lxml")

    # path for generating a request will be used like this
    # good_path = "https://steamcommunity.com/id/{}/games/?tab=all".format("Dart")
    good_path = "https://steamcommunity.com/id/{}/games/?tab=all"

    # attempt to avoid pointlessly repeating requests
    tried_ids = []

    # keep track of how many profiles attempted
    profiles_attempted = []

    for idx in xrange(45000):
        user_id = "765611979"
        user_num = ""

        # generate random numbers for user_id to try
        for idy in xrange(8):
            user_num += str(random.randint(0, 9))

        # try to be nice to steam servers
        time.sleep(random.random() * 1.0)

        # coalesce the user_id
        user_id = user_id + user_num

        # try to prevent duplicate requests
        if user_id not in tried_ids:
            # add id so it will show in request checks
            tried_ids.append(user_id)

            #print user_id

            req = requests.get(path + user_id)

            soup = BeautifulSoup(req.content, "lxml")

            if soup != none_soup:
                try:
                    profiles_attempted.append(user_id)


                    print "Attempt:", idx, "profiles attempted/found so far:", len(profiles_attempted), "/", len(tried_ids)
                    print req, "user_id:", user_id

                    # find the username in the profile info stuff
                    para = soup.find_all("p")
                    user_id = str(para)[str(para).find("personaname"):].split(",")[0].split(" ")[1].strip('"')
                    attempt_to_get_user_profile(user_id, good_path.format(user_id), profile_error)
                    print

            else:
                pass

def attempt_to_get_user_profile(user_id, path, bad_soup):

    # make real request
    good_req = requests.get(path)

    # convert to soup object
    profile_good = BeautifulSoup(good_req.content, "lxml")

    # see if we got the error page
    if len(profile_good.prettify()) < 21000:
        print "error page for", user_id
    else:

        # make dict for mongo_db
        mongo_dict = {
            "user":user_id,
            "data":profile_good.prettify()
        }

        insert(raw_user_scrape, mongo_dict)

def insert(collection, dictionary):
    if not collection.find_one({"user": dictionary["user"]}):
        try:
            collection.insert_one(dictionary)
            print "inserted", dictionary["user"]

        except Exception, e:
            print e

    else:
        print "already exists"

if __name__ == "__main__":
    # connect to the hosted MongoDB instance
    client = MongoClient('mongodb://localhost:27017/')

    # connect to our mongodb indie game database collection
    db = client.capstone

    #indie game DB raw web scrape for users

    raw_user_scrape = db.raw_user_scrape
